// **************************************************************************
//
//               Demo program for APPS labs
//
// Subject:      Computer Architectures and Parallel systems
// Author:       Petr Olivka, petr.olivka@vsb.cz, 02/2025
// Organization: Department of Computer Science, FEECS,
//               VSB-Technical University of Ostrava, CZ
//
// File:         Main program for testing.
//
// **************************************************************************

/**
 * @file    main-test.cpp
 * @brief   Application entry point.
 */
#include <stdio.h>
#include <functional>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "fsl_debug_console.h"

#include "fsl_gpio.h"
#include "fsl_port.h"
#include "fsl_mrt.h"

#include "mcxn-kit.h"

// **************************************************************************
//! System initialization. Do not modify it!!!
void _mcu_initialization() __attribute__(( constructor( 0x100 ) ));

void _mcu_initialization()
{
    BOARD_InitBootPins();
    BOARD_InitBootClocks();
    BOARD_InitBootPeripherals();
    BOARD_InitDebugConsole();
    CLOCK_EnableClock( kCLOCK_Gpio0 );
    CLOCK_EnableClock( kCLOCK_Gpio1 );
    CLOCK_EnableClock( kCLOCK_Gpio2 );
    CLOCK_EnableClock( kCLOCK_Gpio3 );
    CLOCK_EnableClock( kCLOCK_Gpio4 );
}
// **************************************************************************

//! Global data

//! LEDs on MCXN-KIT - instances of class DigitalOut
DigitalOut g_led_P3_16( P3_16 );
DigitalOut g_led_P3_17( P3_17 );

//! Button on MCXN-KIT - instance of class DigitalIn
DigitalIn g_but_P3_18( P3_18 );
DigitalIn g_but_P3_19( P3_19 );
DigitalIn g_but_P3_20( P3_20 );
DigitalIn g_but_P3_21( P3_21 );

void test_leds();
void test_lcd();
void test_i2c();

#define T 100

class LED
{
public:
    DigitalOut m_led;
    uint32_t m_T0;        // cas T0

  LED( uint32_t t_led_pin ) : m_led( t_led_pin )
    {
    // inicializace promennych
    }

    void nastav_jas_proc( uint8_t t_jas_proc )
    {
        m_T0 = (float)t_jas_proc/100 * T;
    }
};

LED g_red_led[] = { P3_16, P3_17 };

void pwm_control()
{
	static uint32_t ticks = 0;

	if(ticks < g_red_led[0].m_T0) {
		g_red_led[0].m_led = 0;
	} else {
		g_red_led[0].m_led = 1;
	}

	if(ticks < g_red_led[1].m_T0) {
			g_red_led[1].m_led = 0;
	} else {
			g_red_led[1].m_led = 1;
	}
	ticks++;
	if(ticks >= T)
	{
		ticks = 0;
	}
}

int main()
{

  Ticker pwm1;
  pwm1.attach( pwm_control );
    g_red_led[ 0 ].nastav_jas_proc( 5 );
    g_red_led[ 1 ].nastav_jas_proc( 50 );

    while ( 1 ) __WFI();
}

